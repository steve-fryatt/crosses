REM >!Crosses
REM
REM Copyright 1993-2014, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Crosses:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.

LIBRARY "BASIC:Icon"
LIBRARY "BASIC:Menu"
LIBRARY "BASIC:Message"
LIBRARY "BASIC:Resources"
LIBRARY "BASIC:Template"
LIBRARY "BASIC:Url"
LIBRARY "BASIC:WimpError"
LIBRARY "BASIC:WimpSprite"
LIBRARY "BASIC:Window"

PROCwimperror_initialise("Crosses", "!crosses")
ON ERROR result% = FNwimperror_program : END

REM These values get replaced by tokenize.

build_version$ = "1.10"
build_date$ = "01 Jul 2009"

PROCinitialise

ON ERROR Quit% = FNwimperror_program

WHILE NOT Quit%
	PROCpoll
ENDWHILE

SYS "Wimp_CloseDown"
END


REM Handle calls to Wimp_Poll and process the responses.
:
DEF PROCpoll
LOCAL reason%

SYS "Wimp_Poll", &3C01, b% TO reason%

CASE reason% OF
	WHEN 2		: SYS "Wimp_OpenWindow",,b%
	WHEN 3		: SYS "Wimp_CloseWindow",,b%
	WHEN 6		: PROCmouse_click(b%!12, b%!16, b%!8)
	WHEN 8		: SYS "Wimp_ProcessKey",b%!24
	WHEN 9		: PROCmenu_selection(b%)
	WHEN 17, 18	: PROCuser_message(b%)
	WHEN 19		: IF b%!16 = &4AF80 THEN PROCurl_bounce(b%)
ENDCASE
ENDPROC


REM Process mouse clicks in windows.
REM
REM \param window%	The window under the mouse.
REM \param icon%	The icon under the mouse.
REM \param buttons%	The buttons involved in the selection.
:
DEF PROCmouse_click(window%, icon%, buttons%)
CASE window% OF
WHEN -2
	CASE buttons% OF
	WHEN 1, 4
		IF NOT play% THEN
			PROCnew_game
			PROCwindow_open(MainWindow%)
			PROCwindow_force_redraw(MainWindow%)
		ELSE
			PROCwindow_open(MainWindow%)
		ENDIF
	WHEN 2
		PROCmenu_create_iconbar(IconbarMenu%, !b%)
	ENDCASE

WHEN MainWindow%
	CASE icon% OF
	WHEN 0, 1, 2, 3, 4, 5, 6, 7, 8
		IF play% AND board(icon%) = 0 THEN
			N = icon%
			IF player% PROCdrawX ELSE PROCdrawO
			IF player% THEN moves += 1
			player% = NOT player%
			PROCcomp
			IF (NOT xwin) AND (NOT owin) THEN
				IF moves >= 5 THEN PROCdraw
			ENDIF
			IF moves < 5 AND (NOT xwin) AND comp% PROCdrawO : player% = NOT player%
			IF xwin THEN PROCxwin
			IF owin THEN PROCowin
		ENDIF
	ENDCASE

WHEN OptionsWindow%
	CASE icon% OF
	WHEN 10
		comp%=FNicon_selected(OptionsWindow%, 10)
	WHEN 7
		PROCicon_set_shaded(OptionsWindow%, 6, NOT FNicon_selected(OptionsWindow%, 7))
	WHEN 9
		PROCicon_set_shaded(OptionsWindow%, 8, NOT FNicon_selected(OptionsWindow%, 9))
	WHEN -1 : REM Was Reset
		ScoreX% = 0
		ScoreO% = 0
		GamesPlayed%=0
		PROCwrite_scores(0, 0, 0)
		PROCwindow_force_redraw(MainWindow%)
	WHEN -2 : REM Was New Game
		PROCnew_game
		PROCwindow_force_redraw(MainWindow%)
	WHEN 12
		PROCwrite_scores(ScoreX%, ScoreO%, GamesPlayed%)
		PROCwindow_force_redraw(MainWindow%)
	WHEN 13
		PROCmenu_create(0, 0, -1)
	ENDCASE

WHEN InfoWindow%
	IF buttons% = 4 AND icon% = 8 THEN
		PROCurl_launch(FNmessage_lookup("SupportURL"))
		PROCmenu_create(-1, 0, 0)
	ENDIF
ENDCASE
ENDPROC


REM Process selections from menus.
REM
REM \param		The menu selection block.
:
DEF PROCmenu_selection(block%)
LOCAL reopen%

SYS "Wimp_GetPointerInfo",,q%
reopen% = (q%!8 = 1)

CASE FNmenu_current_handle OF
WHEN IconbarMenu%
	CASE !block% OF
		WHEN 1	: OSCLI("%Filer_Run <Crosses$Dir>.!Help")
		WHEN 3	: Quit% = TRUE
	ENDCASE
ENDCASE

IF reopen% THEN PROCmenu_create(FNmenu_current_handle, 0, 0)
ENDPROC


REM Process incoming user messages.
REM
REM \param		The user message block.
:
DEF PROCuser_message(block%)
CASE block%!16 OF
	WHEN 0		: Quit% = TRUE
	WHEN &4E383	: PROCurl_bounce(b%)
ENDCASE
ENDPROC


REM Initialise ourselves, internally and with the Wimp.
:
DEF PROCinitialise
LOCAL i%, resources$, task_name$, task_sprite$, indirected_data%, indirected_size%, ibar_icon%

REM Set up the quit flag and global data blocks.

Quit% = FALSE

DIM b% 4000, q% 255, a% 255

REM Locate the application resources.

resources$ = FNresources_find_territory_folder("<Crosses$Dir>.Resources")

REM Load the messages file.

PROCmessage_initialise(resources$ + "Messages")

task_name$ = FNmessage_lookup("TaskName")
task_sprite$ = FNmessage_lookup("TaskSpr")
PROCwimperror_initialise(task_name$, task_sprite$)

REM Initialise with the Wimp.

q%!0 = &4E383
q%!4 = &4AF80
q%!8 = 0

SYS "Wimp_Initialise", 310, &4B534154, task_name$, q%

REM Load the application sprites.

SpriteArea% = FNwimpsprite_load_user_sprites("<Crosses$Dir>.SpriteFile")

REM Load the window templates

indirected_size% = 2048
DIM indirected_data% indirected_size%

PROCtemplate_open(resources$ + "Templates")
PROCtemplate_load("Board", b%, indirected_data%, indirected_size%, -1)
b%!64 = SpriteArea%
FOR i% = 0 TO 8
	b%!(88 + 32*i% + 24) = SpriteArea%
NEXT i%
SYS "Wimp_CreateWindow",,b% TO MainWindow%
PROCtemplate_load("ProgInfo", b%, indirected_data%, indirected_size%, -1)
SYS "Wimp_CreateWindow",,b% TO InfoWindow%
PROCtemplate_load("Options", b%, indirected_data%, indirected_size%, -1)
SYS "Wimp_CreateWindow",,b% TO OptionsWindow%
PROCtemplate_close

$FNicon_indirection(InfoWindow%, 4) = CHR$(169) + " Stephen Fryatt, 1993-" + MID$(build_date$, 8)
$FNicon_indirection(InfoWindow%, 6) = build_version$ + " (" + build_date$ + ")"

REM Initialise and load the menu templates

PROCmenu_initialise

b%!0 = InfoWindow%
b%!4 = OptionsWindow%
PROCmenu_load_templates(resources$ + "Menus", b%)
IconbarMenu% = b%!0








DIM subscripts(23),constinant(12),board(8),horisontal(8),vertical(8),count(12)
DATA 0,1,2,3,4,5,6,7,8,0,3,6,1,4,7,2,5,8,0,4,8,2,4,6
FOR I=0 TO 23:READ subscripts(I):NEXT I
DATA 0,7,31,128,-15,0,0,0,-63,0,0,0,0
FOR I=0 TO 12:READ constinant(I):NEXT I
DATA 0,1,4,192
READ blank,nought,cross,size
FOR I=0 TO 8
horisontal(I)=size*(1+(I MOD 3))
vertical(I)=size*(3-(I DIV 3))
NEXT I
ibar_icon% = FNicon_create_standard_bar(-1, task_sprite$)
play%=FALSE
comp%=FALSE
ScoreX% = 0
ScoreO% = 0
GamesPlayed%=0
ENDPROC







REM Draw the contents of a grid square.
REM
REM \param square%		The square (0 to 8) to draw.
REM \param value$		The sprite name to place in the square.
:
DEF PROCdraw_square(square%, value$)
IF square% < 0 OR square% > 8 OR LEN(value$) <> 1 THEN ENDPROC
$FNicon_indirection(MainWindow%, square%) = value$
ENDPROC


REM Write a message to the message field below the playing grid.
REM
REM \param text$		The text of the message to write.
:
DEF PROCwrite_message(text$)
PROCicon_set_indirected_text(MainWindow%, 9, text$)
ENDPROC


REM Write the scores and the number of games to the scores field in the
REM main window.
REM
REM \param xscore%		The score for player X.
REM \param oscore%		The score for player O.
REM \param games%		The number of games played.
:
DEF PROCwrite_scores(xscore%, oscore%, games%)
PROCicon_set_indirected_text(MainWindow%, 10, STR$(xscore%))
PROCicon_set_indirected_text(MainWindow%, 11, STR$(oscore%))

IF FNicon_selected(OptionsWindow%, 12) THEN
	PROCicon_set_indirected_text(MainWindow%, 12, "Scores (of " + STR$(games%) + ")")
ELSE
	PROCicon_set_indirected_text(MainWindow%, 12, "Scores")
ENDIF
ENDPROC



:
DEF PROCnew_game
LOCAL i%

moves=0

FOR i% = 0 TO 8
	PROCdraw_square(i%, "-")
NEXT i%
board()=0
play%=TRUE
player%=-1
IF FNicon_selected(OptionsWindow%, 7) THEN
PROCwrite_message($FNicon_indirection(OptionsWindow%, 6)+" to move")
ELSE
PROCwrite_message("X to move")
ENDIF
PROCicon_set_colours(MainWindow%,9,11,1)
ENDPROC
:

:
DEF PROCcomp
max=-1000:xwin=FALSE:owin=FALSE
FOR P=0 TO 8
 IF board(P)=blank THEN
  IF comp% THEN board(P)=nought
  FOR I=1 TO 12:count(I)=0:NEXT I
  FOR I=0 TO 21 STEP 3
   type=board(subscripts(I))+board(subscripts(I+1))+board(subscripts(I+2))
   count(type)=count(type)+1
  NEXT I
  IF count(3) owin=TRUE
  IF count(12) xwin=TRUE
  IF comp% THEN
   score=0
   FOR I=1 TO 8
   score=score+count(I)*constinant(I)
   NEXT I
   IF score>max max=score:N=P
  ENDIF
  board(P)=blank
 ELSE
  FOR I=1 TO 12:count(I)=0:NEXT I
  FOR I=0 TO 21 STEP 3
   type=board(subscripts(I))+board(subscripts(I+1))+board(subscripts(I+2))
   count(type)=count(type)+1
  NEXT I
  IF count(3) owin=TRUE
  IF count(12) xwin=TRUE
 ENDIF
NEXT P
IF xwin AND owin AND comp% THEN owin=FALSE
ENDPROC
:
DEF PROCdrawX
PROCdraw_square(N, "x")
board(N)=cross
PROCicon_set_colours(MainWindow%,9,10,1)
IF FNicon_selected(OptionsWindow%, 9) THEN
PROCwrite_message($FNicon_indirection(OptionsWindow%, 8)+" to move")
ELSE
PROCwrite_message("O to move")
ENDIF
PROCwindow_force_redraw(MainWindow%)
ENDPROC

DEF PROCdrawO
PROCdraw_square(N, "0")
board(N)=nought
IF NOT owin THEN
IF FNicon_selected(OptionsWindow%, 7) THEN
PROCwrite_message($FNicon_indirection(OptionsWindow%, 6)+" to move")
ELSE
PROCwrite_message("X to move")
ENDIF
ENDIF
PROCicon_set_colours(MainWindow%, 9, 11, 1)
PROCwindow_force_redraw(MainWindow%)
ENDPROC

DEF PROCowin
play%=FALSE
IF FNicon_selected(OptionsWindow%, 9) THEN
PROCwrite_message($FNicon_indirection(OptionsWindow%, 8)+" wins game")
ELSE
PROCwrite_message("O wins game")
ENDIF
PROCicon_set_colours(MainWindow%,9,10,1)
ScoreO% += 1
IF GamesPlayed%<99 THEN GamesPlayed%+=1
PROCwrite_scores(ScoreX%, ScoreO%, GamesPlayed%)
PROCwindow_force_redraw(MainWindow%)
ENDPROC
:
DEF PROCxwin
play%=FALSE
IF FNicon_selected(OptionsWindow%, 7) THEN
PROCwrite_message($FNicon_indirection(OptionsWindow%, 6)+" wins game")
ELSE
PROCwrite_message("X wins game")
ENDIF
PROCicon_set_colours(MainWindow%,9,11,1)
ScoreX% += 1
IF GamesPlayed%<99 THEN GamesPlayed%+=1
PROCwrite_scores(ScoreX%, ScoreO%, GamesPlayed%)
PROCwindow_force_redraw(MainWindow%)
ENDPROC
:
DEF PROCdraw
play%=FALSE
PROCwrite_message("Game drawn")
PROCicon_set_colours(MainWindow%,9,7,1)
IF FNicon_selected(OptionsWindow%, 11) THEN
 ScoreX% += 1
 ScoreO% += 1
ENDIF
IF GamesPlayed%<99 THEN GamesPlayed%+=1
PROCwrite_scores(ScoreX%, ScoreO%, GamesPlayed%)
PROCwindow_force_redraw(MainWindow%)
ENDPROC
